kb_time_20200202
kb_abstract_对HashMap的分析
kb_tag_HashMap

关于节点类型：一个是Node，一个是TreeNode
	
	public class Node<K,V> {
        final int hash;
        final K key;
        V value;
        Node<K,V> next;
    }
	
	public class TreeNode<K,V> {
        TreeNode<K,V> parent;
        TreeNode<K,V> left;
        TreeNode<K,V> right;
        TreeNode<K,V> prev;
        boolean red;
    }
	

HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的

从ADT来分析：
	
	void put(Key key, Value value);
	Value get(Key key);
	void remove(Key key);
	
put:
计算根据hashcode()重新计算，if(key == null) hash = 0;从这里看出hashmap实际上是支持空指针的
hash = h ^ (h >>> 16);

如果发现数组为空，初始化数组。
如果发现位置为空，则将元素放入数组中。hash函数使用取模法，因为数组长度是2的倍数，所以简便操作(length - 1) & hash。
如果发现位置不为空，则从首元素开始判断hash与equals是否相等。










为什么Map桶中的个数超过8才转换为红黑树？
在理想情况下，随机hashcode算法下所有bin中节点的分布频率会遵循泊松分布，我们可以看到，一个bin中链表长度达到8个元素的概率为0.00000006，
几乎是不可能事件，所以之所以选择8，是根据概率统计决定的。

