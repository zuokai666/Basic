kb_time_20200202
kb_abstract_对二叉搜索树的分析
kb_tag_BinarySearchTree

树是一种半线性结构，遍历的方式有4种，分别是先序遍历 ，中序遍历，后序遍历，层次遍历。

进一步限制节点度数，节点度数不超过2的树称为二叉树binary tree

进一步限制顺序性，左孩子 <= root <= 右孩子，普通二叉树就变为了二叉搜索树Binary Search Tree（BST）

为了防止树退化为单链表，BST演变为BBST，平衡二叉搜索树。针对于平衡规则，不同的规则有不同的实现方式。AVL树与红黑树。

与BBST不同，B树旨在减少定位记录时所经历的中间过程，从而加快存取速度，普遍应用于内存访问外存的应用中，例如数据库与文件系统。
B树和B+树区别在于B+树的非叶子节点只包含导航信息，不包含实际的值，所有的叶子节点与相邻的节点使用链表相连，便于区间查找和遍历。




2020年5月11日
BST的特性：左孩子 <= root <= 右孩子，可以方便我们的查找，缺点是：极端情况下可能退化为单链，降低查找效率。
所以为了使树达到二分查找的效率O(log n)，必须加以限制。

有两种：使其从普通BST变味了平衡BST
1.AVL树：左子树，右子树高度差不超过1，从而解决了退化问题。常见的操作有左旋右旋。
2.红黑树：规则复杂
2.1 节点颜色分为红黑色。
2.2 根节点为黑
2.3 叶子节点为黑
2.4 不能有两个相邻的红
2.5 从任意节点出发到叶子节点，黑节点个数相同。
常见操作是变色与旋转


红黑树的插入：
1.新节点初始化红色，如果父节点为黑色，则不改动。
如果父节点为红色，则进行改动。

局面1：新结点（A）位于树根，没有父结点。
局面2：新结点（B）的父结点是黑色。
局面3：新结点（D）的父结点和叔叔结点都是红色。	（新节点叔父都是红，三次变色，叔父变黑，爷爷变红）
局面4：新结点（D）的父结点是红色，叔叔结点是黑色或者没有叔叔，且新结点是父结点的右孩子，父结点（B）是祖父结点的左孩子。
局面5：新结点（D）的父结点是红色，叔叔结点是黑色或者没有叔叔，且新结点是父结点的左孩子，父结点（B）是祖父结点的左孩子。


首先变色，当变色解决不了问题时，再进行旋转。





